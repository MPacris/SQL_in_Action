-- <<<<<<<<<<<<<<<<<<<<<<< EXAMPLE >>>>>>>>>>>>>>>>>>>>>>>>
-- TODO: Remove the "--" from the below SELECT query and run the query
--    NOTE: When writing queries, make sure each one ends with a semi-colon

-- SELECT * FROM final_airbnb;



-- <<<<<<<<<<<<<<<<<<<<<< PROBLEM 1 >>>>>>>>>>>>>>>>>>>>>>>
-- Find out how many rows are in the table "final_airbnb"
-- EXPECTED OUTPUT: 146

SELECT COUNT(id) FROM intro_sql.final_airbnb;

-- <<<<<<<<<<<<<<<<<<<<<< PROBLEM 2 >>>>>>>>>>>>>>>>>>>>>>>
-- Find out the name of the host for "host_id" 63613
-- HINT: "Where" could it be?

SELECT host_name FROM intro_sql.final_airbnb where host_id = 63613;

-- EXPECTED OUTPUT: Patricia


-- <<<<<<<<<<<<<<<<<<<<<< PROBLEM 3 >>>>>>>>>>>>>>>>>>>>>>>
-- Query the data to just show the unique neighbourhoods listed
-- HINT: This is a "distinct" operation...

-- EXPECTED OUTPUT: 40 neighbourhoods listed

SELECT distinct neighbourhood FROM intro_sql.final_airbnb;



-- <<<<<<<<<<<<<<<<<<<<<< PROBLEM 4 >>>>>>>>>>>>>>>>>>>>>>>

-- Find both the highest price listing and the lowest price listing, displaying the entire row for each
-- HINT: This can be two different queries.

-- FOOD FOR THOUGHT: Think about the results. Are the high and low prices outliers in this data set?

-- EXPECTED OUTPUT: Highest = 785, Lowest = 55  NOTE::MULTIPLE ROWS or LISTINGS for LOWEST at 55

SELECT * FROM intro_sql.final_airbnb WHERE price = (select min(price) from intro_sql.final_airbnb);

SELECT * FROM intro_sql.final_airbnb WHERE price = (select max(price) from intro_sql.final_airbnb);


-- <<<<<<<<<<<<<<<<<<<<<< PROBLEM 5 >>>>>>>>>>>>>>>>>>>>>>>
-- Find the average availability for all listings in the data set (using the availability_365 column)
-- HINT: Aggregates are more than just big rocks...

-- EXPECTED OUTPUT: 165.3904

SELECT AVG(availability_365) FROM intro_sql.final_airbnb;



-- <<<<<<<<<<<<<<<<<<<<<< PROBLEM 6 >>>>>>>>>>>>>>>>>>>>>>>
-- Find all listings that do NOT have a review
-- HINT: There are a few ways to go about this. Remember that an empty cell is "no value", but not necessarily NULL

SELECT * FROM intro_sql.final_airbnb WHERE reviews_per_month = 0;

SELECT * FROM intro_sql.final_airbnb WHERE number_of_reviews = 0;


-- EXPECTED OUTPUT: 6 rows


-- <<<<<<<<<<<<<<<<<<<<<< PROBLEM 7 >>>>>>>>>>>>>>>>>>>>>>>
-- Find the id of the listing with a room_type of "Private room" that has the most reviews 
-- HINT: Sorting is your friend!

SELECT id FROM intro_sql.final_airbnb WHERE room_type = "Private room" order by number_of_reviews desc Limit 1; 

-- EXPECTED OUTPUT: 58059


-- <<<<<<<<<<<<<<<<<<<<<< PROBLEM 8 >>>>>>>>>>>>>>>>>>>>>>>
-- Find the most popular neighbourhood for listings 
-- HINT: Look for which neighbourhood appears most frequently in the neighbourhood column
-- HINT: You are creating "summary rows" for each neighbourhood, so you will just see one entry for each neighbourhood

-- EXPECTED OUTPUT: Williamsburg
-- INVESTIGATE: Should Williamsburg be crowned the most popular neighbourhood?

SELECT neighbourhood, COUNT(*) FROM intro_sql.final_airbnb group by neighbourhood order by count(*) DESC;

-- <<<<<<<<<<<<<<<<<<<<<< PROBLEM 9 >>>>>>>>>>>>>>>>>>>>>>>
-- Query the data to discover which listing is the most popular using the reviews_per_month for all listings with a minimum_nights value of less than 7
-- HINT: Sorting is still your friend! So are constraints.

SELECT id, reviews_per_month, minimum_nights FROM intro_sql.final_airbnb where minimum_nights < 7 ORDER BY reviews_per_month Desc limit 1;

-- EXPECTED OUTPUT: 58059


-- <<<<<<<<<<<<<<<<<<<<<< PROBLEM 10 >>>>>>>>>>>>>>>>>>>>>>>
-- Find out which host has the most listings. 
-- Create a NEW column that will show a calculation for how many listings the host for each listing has in the table
-- Display the column using aliasing.
-- HINT: Work this one step at a time. See if you can find a way to just display the count of listings per host first.

-- EXPECTED OUTPUT: The Box House Hotel with 6 listings

SELECT host_name, COUNT(id) as count_listings FROM intro_sql.final_airbnb group by host_name order by count_listings desc LIMIT 1;


-- <<<<<<<<<<<<<<<<<<<<<< PROBLEM 11 >>>>>>>>>>>>>>>>>>>>>>>
-- <<<<<<<<<<<<<<<<<<<<<<< WRAP UP >>>>>>>>>>>>>>>>>>>>>>>>>
-- What do you think makes a successful AirBnB rental in this market? What factors seem to be at play the most?
-- Write a few sentences and include them with your project submission in the README file 

Based on reviews_per_month, for the top 10, 8 out of 10 are in manhattan, top two in Manhattan.  With regards to room type, 4 of top 5 are private rooms. There also seems to be a correlation with minimum required nights where top three are 1, 1, 2 respectively. Looking at the group as whole, the average price of top 10 is 109.5  If KPI for success is volume or reviews_per_month then driving factors are location, price and minimum night requirements.

SELECT id, neighbourhood_group, price, reviews_per_month, minimum_nights FROM intro_sql.final_airbnb order by reviews_per_month DESC limit 10;

Based on average revenue per month (reviews_per_month * price), for the top 10, 5 out Brooklyn and 5 out of Manhattan, top two out of Brooklyn.  9 out of ten are entire homes.  Top rentals 3 are  minimum 1 night rentals.  avg price is 297.3.   If KPI for success is average revenue per month, the driving factors could be rental type and minimum night requirements.

SELECT id, neighbourhood_group, room_type, minimum_nights, reviews_per_month, price, (reviews_per_month * price) AS avg_rev_month FROM intro_sql.final_airbnb order by avg_rev_month DESC limit 10;


Looking at comparisons within the neighborhoods the driving factors for highest volume is price.  In most cases, the highest volume listing was below the average price listings for that neighborhood.


-- <<<<<<<<<<<<<<<<<<<<< ** BONUS ** >>>>>>>>>>>>>>>>>>>>>>>
-- Find the the percent above or below each listing is compared to the average price for all listings.

SELECT id, ((price / (SELECT avg(price) FROM intro_sql.final_airbnb)) - 1)* 100 as percent_above_below_avg FROM intro_sql.final_airbnb;


-- HINT: No hints! It's a bonus for a reason :)






